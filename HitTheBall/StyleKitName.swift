//
//  StyleKitName.swift
//  SaveTheBird
//
//  Created by Daniel Peters on 19.12.15.
//  Copyright (c) 2015 TapAdventures. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static let grass: UIColor = UIColor(red: 0.106, green: 0.773, blue: 0.027, alpha: 1.000)
        static let sand: UIColor = UIColor(red: 0.851, green: 0.710, blue: 0.298, alpha: 1.000)
        static let sky: UIColor = UIColor(red: 0.651, green: 1.000, blue: 1.000, alpha: 1.000)
        static let wood: UIColor = UIColor(red: 0.463, green: 0.204, blue: 0.067, alpha: 1.000)
        static let gold: UIColor = UIColor(red: 1.000, green: 0.843, blue: 0.000, alpha: 1.000)
        static let shadow_Light: NSShadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)
    }

    //// Colors

    public class var grass: UIColor { return Cache.grass }
    public class var sand: UIColor { return Cache.sand }
    public class var sky: UIColor { return Cache.sky }
    public class var wood: UIColor { return Cache.wood }
    public class var gold: UIColor { return Cache.gold }

    //// Shadows

    public class var shadow_Light: NSShadow { return Cache.shadow_Light }

    //// Drawing Methods

    public class func drawBottom(frame frame: CGRect = CGRectMake(0, 0, 640, 175), isWinter: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let winterExpr = isWinter ? white : StyleKitName.grass

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.14286 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.14286 + 0.5)))
        StyleKitName.sand.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 0.20571 + 0.5) - floor(frame.height * 0.00000 + 0.5)), byRoundingCorners: [UIRectCorner.TopLeft, UIRectCorner.TopRight], cornerRadii: CGSizeMake(10, 10))
        rectangle2Path.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
        winterExpr.setFill()
        rectangle2Path.fill()
        CGContextRestoreGState(context)
    }

    public class func drawCloud(frame frame: CGRect = CGRectMake(0, 0, 256, 128), textInput: String = "Hello, World!", textSize: CGFloat = 21) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.61325 * frame.width, frame.minY + 0.11457 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.64817 * frame.width, frame.minY + 0.19885 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.62871 * frame.width, frame.minY + 0.13947 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.64036 * frame.width, frame.minY + 0.16820 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.79218 * frame.width, frame.minY + 0.21326 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.69106 * frame.width, frame.minY + 0.14808 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.75287 * frame.width, frame.minY + 0.15288 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.82035 * frame.width, frame.minY + 0.28763 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.80612 * frame.width, frame.minY + 0.23466 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.81550 * frame.width, frame.minY + 0.26039 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.83752 * frame.width, frame.minY + 0.26698 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.82570 * frame.width, frame.minY + 0.27939 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.83147 * frame.width, frame.minY + 0.27251 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.93910 * frame.width, frame.minY + 0.29691 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.87045 * frame.width, frame.minY + 0.23685 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.91161 * frame.width, frame.minY + 0.24682 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.93910 * frame.width, frame.minY + 0.52340 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.97342 * frame.width, frame.minY + 0.35945 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.97342 * frame.width, frame.minY + 0.46086 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.93417 * frame.width, frame.minY + 0.53174 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.52632 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.93586 * frame.width, frame.minY + 0.52909 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.93644 * frame.width, frame.minY + 0.53547 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.93494 * frame.width, frame.minY + 0.53294 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.93569 * frame.width, frame.minY + 0.53419 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.93644 * frame.width, frame.minY + 0.70672 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.96390 * frame.width, frame.minY + 0.58276 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.96390 * frame.width, frame.minY + 0.65943 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.88192 * frame.width, frame.minY + 0.74191 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.92149 * frame.width, frame.minY + 0.73247 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.90148 * frame.width, frame.minY + 0.74420 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.86222 * frame.width, frame.minY + 0.80828 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.87966 * frame.width, frame.minY + 0.76621 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.87310 * frame.width, frame.minY + 0.78955 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.76833 * frame.width, frame.minY + 0.81689 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.83654 * frame.width, frame.minY + 0.85250 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.79594 * frame.width, frame.minY + 0.85537 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.76456 * frame.width, frame.minY + 0.82391 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.76714 * frame.width, frame.minY + 0.81929 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.76588 * frame.width, frame.minY + 0.82163 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.67881 * frame.width, frame.minY + 0.84229 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.74130 * frame.width, frame.minY + 0.86396 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.70581 * frame.width, frame.minY + 0.87009 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.66300 * frame.width, frame.minY + 0.88526 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.67538 * frame.width, frame.minY + 0.85795 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.67011 * frame.width, frame.minY + 0.87262 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.56479 * frame.width, frame.minY + 0.88739 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.63595 * frame.width, frame.minY + 0.93336 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.59233 * frame.width, frame.minY + 0.93407 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.55753 * frame.width, frame.minY + 0.90203 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56263 * frame.width, frame.minY + 0.89252 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56021 * frame.width, frame.minY + 0.89741 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.45809 * frame.width, frame.minY + 0.90203 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.53007 * frame.width, frame.minY + 0.94932 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48555 * frame.width, frame.minY + 0.94932 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.44971 * frame.width, frame.minY + 0.88463 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.45493 * frame.width, frame.minY + 0.89659 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.45214 * frame.width, frame.minY + 0.89076 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.36044 * frame.width, frame.minY + 0.86964 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.42234 * frame.width, frame.minY + 0.91780 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.38472 * frame.width, frame.minY + 0.91280 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.35056 * frame.width, frame.minY + 0.84763 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.35661 * frame.width, frame.minY + 0.86284 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.35332 * frame.width, frame.minY + 0.85545 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.27059 * frame.width, frame.minY + 0.82391 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.32444 * frame.width, frame.minY + 0.86907 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.29222 * frame.width, frame.minY + 0.86116 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.25983 * frame.width, frame.minY + 0.80010 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.26635 * frame.width, frame.minY + 0.81660 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.26276 * frame.width, frame.minY + 0.80859 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.16513 * frame.width, frame.minY + 0.79266 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23221 * frame.width, frame.minY + 0.83980 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.19106 * frame.width, frame.minY + 0.83732 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.14892 * frame.width, frame.minY + 0.74921 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.15773 * frame.width, frame.minY + 0.77992 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.15233 * frame.width, frame.minY + 0.76506 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.09091 * frame.width, frame.minY + 0.71682 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.12827 * frame.width, frame.minY + 0.75314 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.10675 * frame.width, frame.minY + 0.74234 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.09091 * frame.width, frame.minY + 0.55662 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.06345 * frame.width, frame.minY + 0.67258 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.06345 * frame.width, frame.minY + 0.60086 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.09556 * frame.width, frame.minY + 0.54976 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.09241 * frame.width, frame.minY + 0.55420 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.09396 * frame.width, frame.minY + 0.55191 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.07652 * frame.width, frame.minY + 0.52340 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.08874 * frame.width, frame.minY + 0.54276 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.08233 * frame.width, frame.minY + 0.53398 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.07652 * frame.width, frame.minY + 0.29691 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.04220 * frame.width, frame.minY + 0.46086 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.04220 * frame.width, frame.minY + 0.35945 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.19831 * frame.width, frame.minY + 0.29252 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.11002 * frame.width, frame.minY + 0.23586 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.16384 * frame.width, frame.minY + 0.23440 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.21004 * frame.width, frame.minY + 0.24705 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.20074 * frame.width, frame.minY + 0.27674 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.20465 * frame.width, frame.minY + 0.26140 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.22678 * frame.width, frame.minY + 0.21326 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.21458 * frame.width, frame.minY + 0.23499 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22015 * frame.width, frame.minY + 0.22362 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.35547 * frame.width, frame.minY + 0.18565 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.26164 * frame.width, frame.minY + 0.15874 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.31452 * frame.width, frame.minY + 0.14953 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.38675 * frame.width, frame.minY + 0.11457 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.36310 * frame.width, frame.minY + 0.15995 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.37353 * frame.width, frame.minY + 0.13586 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.41332 * frame.width, frame.minY + 0.08002 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.39499 * frame.width, frame.minY + 0.10131 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.40391 * frame.width, frame.minY + 0.08979 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.61325 * frame.width, frame.minY + 0.11457 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.47534 * frame.width, frame.minY + 0.01564 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.55894 * frame.width, frame.minY + 0.02716 * frame.height))
        bezierPath.closePath()
        bezierPath.lineJoinStyle = .Bevel;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
        white.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, bezierPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, bezierOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRectMake(frame.minX + floor(frame.width * 0.05078 + 0.5), frame.minY + floor(frame.height * 0.19531 + 0.5), floor(frame.width * 0.96484 + 0.5) - floor(frame.width * 0.05078 + 0.5), floor(frame.height * 0.78125 + 0.5) - floor(frame.height * 0.19531 + 0.5))
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: textInput).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: textInput).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawPauseButton(frame frame: CGRect = CGRectMake(0, 0, 50, 65), toggleVisibility: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Variable Declarations
        let visibilityExpr = toggleVisibility ? false : true

        if (visibilityExpr) {
            //// Pause Drawing
            let pausePath = UIBezierPath()
            pausePath.moveToPoint(CGPointMake(frame.minX + 0.14000 * frame.width, frame.minY + 0.92308 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.40000 * frame.width, frame.minY + 0.92308 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.40000 * frame.width, frame.minY + 0.07692 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.14000 * frame.width, frame.minY + 0.07692 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.14000 * frame.width, frame.minY + 0.92308 * frame.height))
            pausePath.closePath()
            pausePath.moveToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.92308 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.86000 * frame.width, frame.minY + 0.92308 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.86000 * frame.width, frame.minY + 0.07692 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.07692 * frame.height))
            pausePath.addLineToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.92308 * frame.height))
            pausePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
            UIColor.whiteColor().setFill()
            pausePath.fill()

            ////// Pause Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, pausePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let pauseOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, pauseOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            pauseOpaqueShadow.setFill()
            pausePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            pausePath.lineWidth = 1
            pausePath.stroke()
        }


        if (toggleVisibility) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.moveToPoint(CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.05385 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.94615 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.93000 * frame.width, frame.minY + 0.50000 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.05385 * frame.height))
            bezierPath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
            UIColor.whiteColor().setFill()
            bezierPath.fill()

            ////// Bezier Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, bezierPath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let bezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, bezierOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            bezierOpaqueShadow.setFill()
            bezierPath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()
        }
    }

    public class func drawGun(frame frame: CGRect = CGRectMake(0, 0, 150, 20)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.91335 * frame.width, frame.minY + 0.25014 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.98262 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.91333 * frame.width, frame.minY + 0.25000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.98262 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.84408 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.01741 * frame.width, frame.minY + 1.00000 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.08667 * frame.width, frame.minY + 0.25000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.01738 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.08667 * frame.width, frame.minY + 0.25000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.91333 * frame.width, frame.minY + 0.25000 * frame.height))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.91335 * frame.width, frame.minY + 0.25014 * frame.height))
        bezierPath.closePath()
        StyleKitName.wood.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, bezierPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, bezierOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawBall(frame frame: CGRect = CGRectMake(0, 0, 100, 100), golden: Bool = false, colorInput: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let yellow = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let blue = UIColor(red: 0.000, green: 0.000, blue: 1.000, alpha: 1.000)
        let green = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_Ball = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.53), offset: CGSizeMake(-10.1, -10.1), blurRadius: 5)
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Variable Declarations
        let color = golden ? StyleKitName.gold : (colorInput == 0 ? red : (colorInput == 1 ? green : (colorInput == 2 ? blue : (colorInput == 3 ? yellow : black))))

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 3, frame.minY + 3, floor((frame.width - 3) * 0.97938 + 0.5), floor((frame.height - 3) * 0.95876 + 0.5)))
        color.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow_Ball.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (shadow_Ball.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow_Ball.shadowOffset, shadow_Ball.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawMenuIcon(frame frame: CGRect = CGRectMake(0, 0, 125, 125), toggleVisibility: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Variable Declarations
        let visibilityExpr = toggleVisibility ? false : true

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.02400 + 0.5), frame.minY + floor(frame.height * 0.01600 + 0.5), floor(frame.width * 0.98400 + 0.5) - floor(frame.width * 0.02400 + 0.5), floor(frame.height * 0.97600 + 0.5) - floor(frame.height * 0.01600 + 0.5)))
        white.setFill()
        ovalPath.fill()
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.09200) + 0.5, frame.minY + floor(frame.height * 0.09200) + 0.5, floor(frame.width * 0.90800) - floor(frame.width * 0.09200), floor(frame.height * 0.90800) - floor(frame.height * 0.09200)))
        StyleKitName.sky.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        CGContextRestoreGState(context)


        if (toggleVisibility) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.moveToPoint(CGPointMake(frame.minX + 0.53504 * frame.width, frame.minY + 0.15860 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.54777 * frame.width, frame.minY + 0.21481 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.53504 * frame.width, frame.minY + 0.15860 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.54282 * frame.width, frame.minY + 0.19298 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.62194 * frame.width, frame.minY + 0.23616 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.57382 * frame.width, frame.minY + 0.21851 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.59872 * frame.width, frame.minY + 0.22580 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.66362 * frame.width, frame.minY + 0.19109 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.63683 * frame.width, frame.minY + 0.22007 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66362 * frame.width, frame.minY + 0.19109 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.71045 * frame.width, frame.minY + 0.21812 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.69118 * frame.width, frame.minY + 0.28023 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.71045 * frame.width, frame.minY + 0.21812 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.69736 * frame.width, frame.minY + 0.26034 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.72828 * frame.width, frame.minY + 0.31913 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.70475 * frame.width, frame.minY + 0.29198 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.71718 * frame.width, frame.minY + 0.30500 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.79672 * frame.width, frame.minY + 0.29789 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.74318 * frame.width, frame.minY + 0.31450 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.79672 * frame.width, frame.minY + 0.29789 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.82376 * frame.width, frame.minY + 0.34472 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.77039 * frame.width, frame.minY + 0.39407 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.82376 * frame.width, frame.minY + 0.34472 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.78067 * frame.width, frame.minY + 0.38456 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.78520 * frame.width, frame.minY + 0.45223 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.77732 * frame.width, frame.minY + 0.41261 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.78233 * frame.width, frame.minY + 0.43207 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.84140 * frame.width, frame.minY + 0.46496 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.80702 * frame.width, frame.minY + 0.45718 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.84140 * frame.width, frame.minY + 0.46496 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.84140 * frame.width, frame.minY + 0.51904 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.78520 * frame.width, frame.minY + 0.53176 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.84140 * frame.width, frame.minY + 0.51904 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.80702 * frame.width, frame.minY + 0.52682 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.76807 * frame.width, frame.minY + 0.59595 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.78202 * frame.width, frame.minY + 0.55412 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.77620 * frame.width, frame.minY + 0.57562 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.82376 * frame.width, frame.minY + 0.64728 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.76821 * frame.width, frame.minY + 0.59592 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.82376 * frame.width, frame.minY + 0.64728 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.79672 * frame.width, frame.minY + 0.69411 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.72446 * frame.width, frame.minY + 0.67169 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.72402 * frame.width, frame.minY + 0.67015 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.72446 * frame.width, frame.minY + 0.67169 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.72430 * frame.width, frame.minY + 0.67114 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.68237 * frame.width, frame.minY + 0.71109 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.71160 * frame.width, frame.minY + 0.68520 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.69763 * frame.width, frame.minY + 0.69893 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.70174 * frame.width, frame.minY + 0.77353 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.68849 * frame.width, frame.minY + 0.73085 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.70174 * frame.width, frame.minY + 0.77353 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.65491 * frame.width, frame.minY + 0.80057 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.61056 * frame.width, frame.minY + 0.75262 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.65491 * frame.width, frame.minY + 0.80057 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.62463 * frame.width, frame.minY + 0.76782 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.54325 * frame.width, frame.minY + 0.76980 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.58928 * frame.width, frame.minY + 0.76100 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56672 * frame.width, frame.minY + 0.76685 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.52704 * frame.width, frame.minY + 0.84140 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.54048 * frame.width, frame.minY + 0.78205 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.52704 * frame.width, frame.minY + 0.84140 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.47296 * frame.width, frame.minY + 0.84140 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.45625 * frame.width, frame.minY + 0.76760 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.40771 * frame.width, frame.minY + 0.75379 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.43950 * frame.width, frame.minY + 0.76445 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.42327 * frame.width, frame.minY + 0.75979 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.36544 * frame.width, frame.minY + 0.79950 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.39295 * frame.width, frame.minY + 0.76974 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.36544 * frame.width, frame.minY + 0.79950 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.31861 * frame.width, frame.minY + 0.77246 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.33682 * frame.width, frame.minY + 0.71376 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.31861 * frame.width, frame.minY + 0.77246 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.33033 * frame.width, frame.minY + 0.73468 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.29450 * frame.width, frame.minY + 0.67325 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.32135 * frame.width, frame.minY + 0.70176 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.30716 * frame.width, frame.minY + 0.68818 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.22728 * frame.width, frame.minY + 0.69411 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.27810 * frame.width, frame.minY + 0.67834 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22728 * frame.width, frame.minY + 0.69411 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.20024 * frame.width, frame.minY + 0.64728 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.25008 * frame.width, frame.minY + 0.60119 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.20024 * frame.width, frame.minY + 0.64728 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.23591 * frame.width, frame.minY + 0.61430 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.23080 * frame.width, frame.minY + 0.53176 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.24082 * frame.width, frame.minY + 0.57933 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.23425 * frame.width, frame.minY + 0.55605 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.17460 * frame.width, frame.minY + 0.51904 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.20898 * frame.width, frame.minY + 0.52682 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.17460 * frame.width, frame.minY + 0.51904 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.17460 * frame.width, frame.minY + 0.46496 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.23080 * frame.width, frame.minY + 0.45223 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.17460 * frame.width, frame.minY + 0.46496 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.20898 * frame.width, frame.minY + 0.45718 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.24771 * frame.width, frame.minY + 0.38861 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23395 * frame.width, frame.minY + 0.43009 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.23969 * frame.width, frame.minY + 0.40877 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.20024 * frame.width, frame.minY + 0.34472 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23230 * frame.width, frame.minY + 0.37437 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.20024 * frame.width, frame.minY + 0.34472 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.22728 * frame.width, frame.minY + 0.29789 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.28931 * frame.width, frame.minY + 0.31714 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.22728 * frame.width, frame.minY + 0.29789 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.26937 * frame.width, frame.minY + 0.31095 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.33313 * frame.width, frame.minY + 0.27330 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30225 * frame.width, frame.minY + 0.30096 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.31696 * frame.width, frame.minY + 0.28625 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.31389 * frame.width, frame.minY + 0.21128 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.32695 * frame.width, frame.minY + 0.25338 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.31389 * frame.width, frame.minY + 0.21128 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.34736 * frame.width, frame.minY + 0.19195 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.31389 * frame.width, frame.minY + 0.21128 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.33352 * frame.width, frame.minY + 0.19994 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.36072 * frame.width, frame.minY + 0.18424 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.35490 * frame.width, frame.minY + 0.18760 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.36072 * frame.width, frame.minY + 0.18424 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.38927 * frame.width, frame.minY + 0.21511 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.36072 * frame.width, frame.minY + 0.18424 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.37554 * frame.width, frame.minY + 0.20027 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.40461 * frame.width, frame.minY + 0.23171 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.39495 * frame.width, frame.minY + 0.22126 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.40044 * frame.width, frame.minY + 0.22720 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.46823 * frame.width, frame.minY + 0.21480 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.42477 * frame.width, frame.minY + 0.22369 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.44609 * frame.width, frame.minY + 0.21795 * frame.height))
            bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.48096 * frame.width, frame.minY + 0.15860 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.47318 * frame.width, frame.minY + 0.19298 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48096 * frame.width, frame.minY + 0.15860 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.53503 * frame.width, frame.minY + 0.15860 * frame.height))
            bezierPath.addLineToPoint(CGPointMake(frame.minX + 0.53504 * frame.width, frame.minY + 0.15860 * frame.height))
            bezierPath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
            white.setFill()
            bezierPath.fill()

            ////// Bezier Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, bezierPath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let bezierOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, bezierOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            bezierOpaqueShadow.setFill()
            bezierPath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.28400) + 0.5, frame.minY + floor(frame.height * 0.27600) + 0.5, floor(frame.width * 0.72400) - floor(frame.width * 0.28400), floor(frame.height * 0.71600) - floor(frame.height * 0.27600)))
            StyleKitName.sky.setFill()
            oval4Path.fill()

            ////// Oval 4 Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, oval4Path.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let oval4OpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, oval4OpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            oval4OpaqueShadow.setFill()
            oval4Path.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()
        }


        if (visibilityExpr) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + floor(frame.width * 0.46800) + 0.5, frame.minY + floor(frame.height * 0.40400) + 0.5, floor(frame.width * 0.53200) - floor(frame.width * 0.46800), floor(frame.height * 0.74000) - floor(frame.height * 0.40400)))
            white.setFill()
            rectanglePath.fill()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
            UIColor.blackColor().setStroke()
            rectanglePath.lineWidth = 1
            rectanglePath.stroke()
            CGContextRestoreGState(context)


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.45200) + 0.5, frame.minY + floor(frame.height * 0.25200) + 0.5, floor(frame.width * 0.54800) - floor(frame.width * 0.45200), floor(frame.height * 0.34800) - floor(frame.height * 0.25200)))
            white.setFill()
            oval3Path.fill()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
            UIColor.blackColor().setStroke()
            oval3Path.lineWidth = 1
            oval3Path.stroke()
            CGContextRestoreGState(context)
        }
    }

    public class func drawEgg(frame frame: CGRect = CGRectMake(0, 0, 50, 70), golden: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Variable Declarations
        let goldenEgg = golden ? StyleKitName.gold : white

        //// EggBezier Drawing
        let eggBezierPath = UIBezierPath()
        eggBezierPath.moveToPoint(CGPointMake(frame.minX + 0.74335 * frame.width, frame.minY + 0.15129 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.81319 * frame.width, frame.minY + 0.25144 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.77384 * frame.width, frame.minY + 0.18099 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.79712 * frame.width, frame.minY + 0.21507 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.84435 * frame.width, frame.minY + 0.29414 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.82422 * frame.width, frame.minY + 0.26354 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.83467 * frame.width, frame.minY + 0.27778 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.88650 * frame.width, frame.minY + 0.40222 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.86318 * frame.width, frame.minY + 0.32600 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.87723 * frame.width, frame.minY + 0.36287 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.83213 * frame.width, frame.minY + 0.77728 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.94500 * frame.width, frame.minY + 0.52325 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.92688 * frame.width, frame.minY + 0.67577 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.68760 * frame.width, frame.minY + 0.86321 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.79087 * frame.width, frame.minY + 0.82150 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.74057 * frame.width, frame.minY + 0.85014 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.64435 * frame.width, frame.minY + 0.88326 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.67836 * frame.width, frame.minY + 0.87051 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66394 * frame.width, frame.minY + 0.87737 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.37565 * frame.width, frame.minY + 0.88326 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.57015 * frame.width, frame.minY + 0.90558 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.44985 * frame.width, frame.minY + 0.90558 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.33240 * frame.width, frame.minY + 0.86320 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.35606 * frame.width, frame.minY + 0.87737 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.34164 * frame.width, frame.minY + 0.87051 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.18787 * frame.width, frame.minY + 0.77728 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.27943 * frame.width, frame.minY + 0.85014 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22913 * frame.width, frame.minY + 0.82150 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.13349 * frame.width, frame.minY + 0.40222 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.09312 * frame.width, frame.minY + 0.67577 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.07500 * frame.width, frame.minY + 0.52325 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.17565 * frame.width, frame.minY + 0.29414 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.14277 * frame.width, frame.minY + 0.36287 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.15682 * frame.width, frame.minY + 0.32600 * frame.height))
        eggBezierPath.addLineToPoint(CGPointMake(frame.minX + 0.17648 * frame.width, frame.minY + 0.29275 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.20681 * frame.width, frame.minY + 0.25146 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.18592 * frame.width, frame.minY + 0.27697 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.19609 * frame.width, frame.minY + 0.26321 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.24070 * frame.width, frame.minY + 0.19271 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.21583 * frame.width, frame.minY + 0.23103 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22712 * frame.width, frame.minY + 0.21133 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.27665 * frame.width, frame.minY + 0.15129 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.25129 * frame.width, frame.minY + 0.17818 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.26328 * frame.width, frame.minY + 0.16431 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.38305 * frame.width, frame.minY + 0.08179 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30812 * frame.width, frame.minY + 0.12064 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.34437 * frame.width, frame.minY + 0.09747 * frame.height))
        eggBezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.74335 * frame.width, frame.minY + 0.15129 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.50279 * frame.width, frame.minY + 0.03325 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.64594 * frame.width, frame.minY + 0.05641 * frame.height))
        eggBezierPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
        goldenEgg.setFill()
        eggBezierPath.fill()

        ////// EggBezier Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, eggBezierPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let eggBezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, eggBezierOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        eggBezierOpaqueShadow.setFill()
        eggBezierPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        eggBezierPath.lineWidth = 1
        eggBezierPath.stroke()
    }

    public class func drawMenuBar(frame frame: CGRect = CGRectMake(0, 0, 160, 90), isSelected: Bool = false, menuBarIcon: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Variable Declarations
        let menuBarSelected = isSelected ? StyleKitName.grass : white
        let menuBar_Play = menuBarIcon == 0 ? true : (menuBarIcon == 1 ? false : (menuBarIcon == 2 ? false : (menuBarIcon == 3 ? false : false)))
        let menuBar_Store = menuBarIcon == 0 ? false : (menuBarIcon == 1 ? true : (menuBarIcon == 2 ? false : (menuBarIcon == 3 ? false : false)))
        let menuBar_Bank = menuBarIcon == 0 ? false : (menuBarIcon == 1 ? false : (menuBarIcon == 2 ? true : (menuBarIcon == 3 ? false : false)))
        let menuBar_Highscore = menuBarIcon == 0 ? false : (menuBarIcon == 1 ? false : (menuBarIcon == 2 ? false : (menuBarIcon == 3 ? true : false)))

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)), byRoundingCorners: [UIRectCorner.TopLeft, UIRectCorner.TopRight], cornerRadii: CGSizeMake(10, 10))
        rectanglePath.closePath()
        menuBarSelected.setFill()
        rectanglePath.fill()
        UIColor.blackColor().setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(frame.minX + floor(frame.width * 0.02813) + 0.5, frame.minY + floor(frame.height * 0.03889) + 0.5, floor(frame.width * 0.97813) - floor(frame.width * 0.02813), floor(frame.height * 0.96111) - floor(frame.height * 0.03889)), cornerRadius: 10)
        StyleKitName.sky.setFill()
        rectangle2Path.fill()
        UIColor.blackColor().setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        if (menuBar_Highscore) {
            //// Highscores Drawing
            let highscoresPath = UIBezierPath()
            highscoresPath.moveToPoint(CGPointMake(frame.minX + 0.50313 * frame.width, frame.minY + 0.10000 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.57396 * frame.width, frame.minY + 0.33565 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.73346 * frame.width, frame.minY + 0.37255 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.61774 * frame.width, frame.minY + 0.55510 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.64548 * frame.width, frame.minY + 0.81356 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.50313 * frame.width, frame.minY + 0.69073 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.36077 * frame.width, frame.minY + 0.81356 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.38851 * frame.width, frame.minY + 0.55510 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.27279 * frame.width, frame.minY + 0.37255 * frame.height))
            highscoresPath.addLineToPoint(CGPointMake(frame.minX + 0.43229 * frame.width, frame.minY + 0.33565 * frame.height))
            highscoresPath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
            StyleKitName.gold.setFill()
            highscoresPath.fill()

            ////// Highscores Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, highscoresPath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let highscoresOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, highscoresOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            highscoresOpaqueShadow.setFill()
            highscoresPath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            highscoresPath.lineWidth = 1
            highscoresPath.stroke()
        }


        if (menuBar_Bank) {
            //// Bank Drawing
            let bankPath = UIBezierPath()
            bankPath.moveToPoint(CGPointMake(frame.minX + 0.17188 * frame.width, frame.minY + 0.82778 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.84062 * frame.width, frame.minY + 0.82778 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.84062 * frame.width, frame.minY + 0.77222 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.17188 * frame.width, frame.minY + 0.77222 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.17188 * frame.width, frame.minY + 0.82778 * frame.height))
            bankPath.closePath()
            bankPath.moveToPoint(CGPointMake(frame.minX + 0.22187 * frame.width, frame.minY + 0.77222 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.77812 * frame.width, frame.minY + 0.77222 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.77812 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.22187 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.22187 * frame.width, frame.minY + 0.77222 * frame.height))
            bankPath.closePath()
            bankPath.moveToPoint(CGPointMake(frame.minX + 0.28437 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.35938 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.35938 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.28437 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.28437 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.closePath()
            bankPath.moveToPoint(CGPointMake(frame.minX + 0.46563 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.54063 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.54063 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.46563 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.46563 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.closePath()
            bankPath.moveToPoint(CGPointMake(frame.minX + 0.63438 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.70937 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.70937 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.63438 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.63438 * frame.width, frame.minY + 0.71667 * frame.height))
            bankPath.closePath()
            bankPath.moveToPoint(CGPointMake(frame.minX + 0.50157 * frame.width, frame.minY + 0.11112 * frame.height))
            bankPath.addCurveToPoint(CGPointMake(frame.minX + 0.76725 * frame.width, frame.minY + 0.31667 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.50156 * frame.width, frame.minY + 0.11111 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.73535 * frame.width, frame.minY + 0.29198 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.77812 * frame.width, frame.minY + 0.31667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.77812 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.22187 * frame.width, frame.minY + 0.40556 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.22187 * frame.width, frame.minY + 0.31667 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.23587 * frame.width, frame.minY + 0.31667 * frame.height))
            bankPath.addCurveToPoint(CGPointMake(frame.minX + 0.50156 * frame.width, frame.minY + 0.11111 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.26778 * frame.width, frame.minY + 0.29198 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.50156 * frame.width, frame.minY + 0.11111 * frame.height))
            bankPath.addLineToPoint(CGPointMake(frame.minX + 0.50157 * frame.width, frame.minY + 0.11112 * frame.height))
            bankPath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
            white.setFill()
            bankPath.fill()

            ////// Bank Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, bankPath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let bankOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, bankOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            bankOpaqueShadow.setFill()
            bankPath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            bankPath.lineWidth = 1
            bankPath.stroke()
        }


        if (menuBar_Store) {
            //// ShopPlaceholder Drawing
            let shopPlaceholderPath = UIBezierPath()
            shopPlaceholderPath.moveToPoint(CGPointMake(frame.minX + 0.68125 * frame.width, frame.minY + 0.43334 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.68125 * frame.width, frame.minY + 0.45556 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.68125 * frame.width, frame.minY + 0.47778 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.42500 * frame.width, frame.minY + 0.47778 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.42500 * frame.width, frame.minY + 0.45556 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.42500 * frame.width, frame.minY + 0.43333 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.68125 * frame.width, frame.minY + 0.43334 * frame.height))
            shopPlaceholderPath.closePath()
            shopPlaceholderPath.moveToPoint(CGPointMake(frame.minX + 0.65625 * frame.width, frame.minY + 0.52223 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.65625 * frame.width, frame.minY + 0.54444 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.65625 * frame.width, frame.minY + 0.56667 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.45000 * frame.width, frame.minY + 0.56667 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.45000 * frame.width, frame.minY + 0.54444 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.45000 * frame.width, frame.minY + 0.52222 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.65625 * frame.width, frame.minY + 0.52223 * frame.height))
            shopPlaceholderPath.closePath()
            shopPlaceholderPath.moveToPoint(CGPointMake(frame.minX + 0.26940 * frame.width, frame.minY + 0.20182 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.28944 * frame.width, frame.minY + 0.21621 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.26939 * frame.width, frame.minY + 0.20182 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.27871 * frame.width, frame.minY + 0.20850 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.32125 * frame.width, frame.minY + 0.23905 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30403 * frame.width, frame.minY + 0.22669 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.32125 * frame.width, frame.minY + 0.23905 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.37311 * frame.width, frame.minY + 0.27629 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.37079 * frame.width, frame.minY + 0.28650 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.37311 * frame.width, frame.minY + 0.27629 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.37215 * frame.width, frame.minY + 0.28049 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.37634 * frame.width, frame.minY + 0.31389 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.37282 * frame.width, frame.minY + 0.29650 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.37634 * frame.width, frame.minY + 0.31389 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.37825 * frame.width, frame.minY + 0.32334 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.37634 * frame.width, frame.minY + 0.31389 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.37701 * frame.width, frame.minY + 0.31722 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.43426 * frame.width, frame.minY + 0.60000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.38537 * frame.width, frame.minY + 0.35853 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.41115 * frame.width, frame.minY + 0.48585 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.68583 * frame.width, frame.minY + 0.60000 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.69773 * frame.width, frame.minY + 0.48440 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.69070 * frame.width, frame.minY + 0.55264 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.69773 * frame.width, frame.minY + 0.48440 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.71420 * frame.width, frame.minY + 0.32435 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.74494 * frame.width, frame.minY + 0.33435 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.71199 * frame.width, frame.minY + 0.65445 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.65054 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.71199 * frame.width, frame.minY + 0.65445 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.70641 * frame.width, frame.minY + 0.65263 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.65556 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.65352 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.65556 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.44551 * frame.width, frame.minY + 0.65556 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.45451 * frame.width, frame.minY + 0.70004 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.44866 * frame.width, frame.minY + 0.67115 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.45169 * frame.width, frame.minY + 0.68608 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.46582 * frame.width, frame.minY + 0.70309 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.45842 * frame.width, frame.minY + 0.70024 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.46221 * frame.width, frame.minY + 0.70129 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.49733 * frame.width, frame.minY + 0.75555 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.48051 * frame.width, frame.minY + 0.71043 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.49228 * frame.width, frame.minY + 0.73017 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.60892 * frame.width, frame.minY + 0.75555 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.49733 * frame.width, frame.minY + 0.75555 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56208 * frame.width, frame.minY + 0.75555 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.64502 * frame.width, frame.minY + 0.70124 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.61448 * frame.width, frame.minY + 0.72757 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.62821 * frame.width, frame.minY + 0.70645 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.65312 * frame.width, frame.minY + 0.70000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.64765 * frame.width, frame.minY + 0.70043 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.65036 * frame.width, frame.minY + 0.70000 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.78333 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.67901 * frame.width, frame.minY + 0.70000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.73731 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.65312 * frame.width, frame.minY + 0.86667 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.82936 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.67901 * frame.width, frame.minY + 0.86667 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.60892 * frame.width, frame.minY + 0.81111 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.63272 * frame.width, frame.minY + 0.86667 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.61535 * frame.width, frame.minY + 0.84348 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.49733 * frame.width, frame.minY + 0.81111 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.45312 * frame.width, frame.minY + 0.86667 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.49090 * frame.width, frame.minY + 0.84348 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.47353 * frame.width, frame.minY + 0.86667 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.40625 * frame.width, frame.minY + 0.78333 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.42724 * frame.width, frame.minY + 0.86667 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.40625 * frame.width, frame.minY + 0.82936 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.42474 * frame.width, frame.minY + 0.71702 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.40625 * frame.width, frame.minY + 0.75628 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.41350 * frame.width, frame.minY + 0.73224 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.34331 * frame.width, frame.minY + 0.31480 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.39865 * frame.width, frame.minY + 0.58814 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.35553 * frame.width, frame.minY + 0.37516 * frame.height))
            shopPlaceholderPath.addCurveToPoint(CGPointMake(frame.minX + 0.25769 * frame.width, frame.minY + 0.25333 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.31358 * frame.width, frame.minY + 0.29346 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.25769 * frame.width, frame.minY + 0.25333 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.26939 * frame.width, frame.minY + 0.20182 * frame.height))
            shopPlaceholderPath.addLineToPoint(CGPointMake(frame.minX + 0.26940 * frame.width, frame.minY + 0.20182 * frame.height))
            shopPlaceholderPath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
            menuBarSelected.setFill()
            shopPlaceholderPath.fill()

            ////// ShopPlaceholder Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, shopPlaceholderPath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let shopPlaceholderOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, shopPlaceholderOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            shopPlaceholderOpaqueShadow.setFill()
            shopPlaceholderPath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            UIColor.blackColor().setStroke()
            shopPlaceholderPath.lineWidth = 1
            shopPlaceholderPath.stroke()
        }


        if (menuBar_Play) {
            //// Symbol Drawing
            let symbolRect = CGRectMake(frame.minX + floor(frame.width * 0.25625 + 0.5), frame.minY + floor(frame.height * 0.07778 + 0.5), floor(frame.width * 0.81875 + 0.5) - floor(frame.width * 0.25625 + 0.5), floor(frame.height * 0.91111 + 0.5) - floor(frame.height * 0.07778 + 0.5))
            CGContextSaveGState(context)
            UIRectClip(symbolRect)
            CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

            StyleKitName.drawBird(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), golden: false, colorInput: 0)
            CGContextRestoreGState(context)
        }
    }

    public class func drawBird(frame frame: CGRect = CGRectMake(0, 0, 100, 85), golden: Bool = false, colorInput: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let darkGold = StyleKitName.gold.colorWithShadow(0.4)
        let yellow = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let darkYellow = yellow.colorWithShadow(0.4)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let darkRed = red.colorWithShadow(0.4)
        let blue = UIColor(red: 0.000, green: 0.000, blue: 1.000, alpha: 1.000)
        let darkBlue = blue.colorWithShadow(0.4)
        let green = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let darkGreen = green.colorWithShadow(0.4)
        let orange = UIColor(red: 0.973, green: 0.675, blue: 0.227, alpha: 1.000)
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)
        let birdBodyShadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.6), offset: CGSizeMake(-3.1, -7.1), blurRadius: 5)

        //// Variable Declarations
        let color = golden ? StyleKitName.gold : (colorInput == 0 ? red : (colorInput == 1 ? green : (colorInput == 2 ? blue : (colorInput == 3 ? yellow : black))))
        let birdBottomColor = golden ? darkGold : (colorInput == 0 ? darkRed : (colorInput == 1 ? darkGreen : (colorInput == 2 ? darkBlue : (colorInput == 3 ? darkYellow : darkRed))))

        //// Body Drawing
        let bodyPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.09000 + 0.5), frame.minY + floor(frame.height * 0.09412 + 0.5), floor(frame.width * 0.86000 + 0.5) - floor(frame.width * 0.09000 + 0.5), floor(frame.height * 0.89412 + 0.5) - floor(frame.height * 0.09412 + 0.5)))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
        color.setFill()
        bodyPath.fill()

        ////// Body Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, bodyPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bodyOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, bodyOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        bodyOpaqueShadow.setFill()
        bodyPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        bodyPath.lineWidth = 1
        bodyPath.stroke()


        //// Body_Bottom Drawing
        let body_BottomPath = UIBezierPath()
        body_BottomPath.moveToPoint(CGPointMake(frame.minX + 0.82000 * frame.width, frame.minY + 0.67059 * frame.height))
        body_BottomPath.addLineToPoint(CGPointMake(frame.minX + 0.13000 * frame.width, frame.minY + 0.67059 * frame.height))
        body_BottomPath.addCurveToPoint(CGPointMake(frame.minX + 0.45000 * frame.width, frame.minY + 0.89114 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.13000 * frame.width, frame.minY + 0.67059 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.18000 * frame.width, frame.minY + 0.85806 * frame.height))
        body_BottomPath.addCurveToPoint(CGPointMake(frame.minX + 0.82000 * frame.width, frame.minY + 0.67059 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.72000 * frame.width, frame.minY + 0.92422 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.82000 * frame.width, frame.minY + 0.67059 * frame.height))
        body_BottomPath.addLineToPoint(CGPointMake(frame.minX + 0.82000 * frame.width, frame.minY + 0.67059 * frame.height))
        body_BottomPath.closePath()
        birdBottomColor.setFill()
        body_BottomPath.fill()

        ////// Body_Bottom Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, body_BottomPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((birdBodyShadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let body_BottomOpaqueShadow = (birdBodyShadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, birdBodyShadow.shadowOffset, birdBodyShadow.shadowBlurRadius, body_BottomOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        body_BottomOpaqueShadow.setFill()
        body_BottomPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        body_BottomPath.lineWidth = 0.5
        body_BottomPath.stroke()


        //// eye_white Drawing
        let eye_whitePath = UIBezierPath()
        eye_whitePath.moveToPoint(CGPointMake(frame.minX + 0.75500 * frame.width, frame.minY + 0.21765 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.84500 * frame.width, frame.minY + 0.35882 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.75500 * frame.width, frame.minY + 0.21765 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.82500 * frame.width, frame.minY + 0.28824 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.86500 * frame.width, frame.minY + 0.45294 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.86500 * frame.width, frame.minY + 0.42941 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.86500 * frame.width, frame.minY + 0.45294 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.85500 * frame.width, frame.minY + 0.52353 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.86500 * frame.width, frame.minY + 0.45294 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.86500 * frame.width, frame.minY + 0.51176 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.81500 * frame.width, frame.minY + 0.54706 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.84500 * frame.width, frame.minY + 0.53529 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.83500 * frame.width, frame.minY + 0.54706 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.56500 * frame.width, frame.minY + 0.53529 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.79500 * frame.width, frame.minY + 0.54706 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56500 * frame.width, frame.minY + 0.53529 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.52500 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56500 * frame.width, frame.minY + 0.53529 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.53500 * frame.width, frame.minY + 0.53529 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.52500 * frame.width, frame.minY + 0.37059 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.51500 * frame.width, frame.minY + 0.46471 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.50500 * frame.width, frame.minY + 0.40588 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.64500 * frame.width, frame.minY + 0.22941 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.54500 * frame.width, frame.minY + 0.33529 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.59500 * frame.width, frame.minY + 0.24118 * frame.height))
        eye_whitePath.addCurveToPoint(CGPointMake(frame.minX + 0.75500 * frame.width, frame.minY + 0.21765 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.69500 * frame.width, frame.minY + 0.21765 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.75500 * frame.width, frame.minY + 0.21765 * frame.height))
        eye_whitePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, (shadow_UltraLight.shadowColor as! UIColor).CGColor)
        UIColor.whiteColor().setFill()
        eye_whitePath.fill()

        ////// eye_white Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, eye_whitePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let eye_whiteOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, eye_whiteOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        eye_whiteOpaqueShadow.setFill()
        eye_whitePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        eye_whitePath.lineWidth = 1
        eye_whitePath.stroke()


        //// eye_iris Drawing
        let eye_irisPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.72000 + 0.5), frame.minY + floor(frame.height * 0.34118 + 0.5), floor(frame.width * 0.84000 + 0.5) - floor(frame.width * 0.72000 + 0.5), floor(frame.height * 0.44706 + 0.5) - floor(frame.height * 0.34118 + 0.5)))
        UIColor.blackColor().setFill()
        eye_irisPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(frame.minX + 0.86740 * frame.width, frame.minY + 0.55036 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.91996 * frame.width, frame.minY + 0.55610 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.88635 * frame.width, frame.minY + 0.55181 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.90413 * frame.width, frame.minY + 0.55372 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.91996 * frame.width, frame.minY + 0.59978 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00001 * frame.width, frame.minY + 0.56816 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00001 * frame.width, frame.minY + 0.58772 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.69991 * frame.width, frame.minY + 0.60669 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.86047 * frame.width, frame.minY + 0.60874 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.77352 * frame.width, frame.minY + 0.61104 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.69992 * frame.width, frame.minY + 0.61096 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.70003 * frame.width, frame.minY + 0.60811 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.70003 * frame.width, frame.minY + 0.60954 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.87184 * frame.width, frame.minY + 0.61248 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.75546 * frame.width, frame.minY + 0.60767 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.81862 * frame.width, frame.minY + 0.60818 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.91996 * frame.width, frame.minY + 0.61787 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.88913 * frame.width, frame.minY + 0.61387 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.90537 * frame.width, frame.minY + 0.61567 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.91996 * frame.width, frame.minY + 0.66154 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00001 * frame.width, frame.minY + 0.62993 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00001 * frame.width, frame.minY + 0.64948 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.63004 * frame.width, frame.minY + 0.66154 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.83990 * frame.width, frame.minY + 0.67360 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.71010 * frame.width, frame.minY + 0.67360 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.57795 * frame.width, frame.minY + 0.64824 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.60458 * frame.width, frame.minY + 0.65771 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.58722 * frame.width, frame.minY + 0.65311 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.56343 * frame.width, frame.minY + 0.64158 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.57279 * frame.width, frame.minY + 0.64639 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56791 * frame.width, frame.minY + 0.64417 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.54000 * frame.width, frame.minY + 0.60882 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.54781 * frame.width, frame.minY + 0.63253 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.54000 * frame.width, frame.minY + 0.62068 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.56343 * frame.width, frame.minY + 0.57607 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.54000 * frame.width, frame.minY + 0.59697 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.54781 * frame.width, frame.minY + 0.58511 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.57795 * frame.width, frame.minY + 0.56940 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56791 * frame.width, frame.minY + 0.57347 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.57279 * frame.width, frame.minY + 0.57125 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.63004 * frame.width, frame.minY + 0.55610 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.58721 * frame.width, frame.minY + 0.56453 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.60458 * frame.width, frame.minY + 0.55994 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.86740 * frame.width, frame.minY + 0.55036 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.69427 * frame.width, frame.minY + 0.54643 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.79051 * frame.width, frame.minY + 0.54452 * frame.height))
        bezier2Path.closePath()
        orange.setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, bezier2Path.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bezier2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, bezier2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Wing_down Drawing
        let wing_downPath = UIBezierPath()
        wing_downPath.moveToPoint(CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.41176 * frame.height))
        wing_downPath.addCurveToPoint(CGPointMake(frame.minX + 0.35000 * frame.width, frame.minY + 0.49412 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.41176 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.24000 * frame.width, frame.minY + 0.37647 * frame.height))
        wing_downPath.addCurveToPoint(CGPointMake(frame.minX + 0.26000 * frame.width, frame.minY + 0.81176 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.46000 * frame.width, frame.minY + 0.61176 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.35000 * frame.width, frame.minY + 0.77647 * frame.height))
        wing_downPath.addCurveToPoint(CGPointMake(frame.minX + 0.02000 * frame.width, frame.minY + 0.81176 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.84706 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.06000 * frame.width, frame.minY + 0.88235 * frame.height))
        wing_downPath.addCurveToPoint(CGPointMake(frame.minX + 0.10000 * frame.width, frame.minY + 0.49412 * frame.height), controlPoint1: CGPointMake(frame.minX + -0.02000 * frame.width, frame.minY + 0.74118 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.05000 * frame.width, frame.minY + 0.57647 * frame.height))
        wing_downPath.addCurveToPoint(CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.41176 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.15000 * frame.width, frame.minY + 0.41176 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.17000 * frame.width, frame.minY + 0.41176 * frame.height))
        wing_downPath.closePath()
        UIColor.whiteColor().setFill()
        wing_downPath.fill()

        ////// Wing_down Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, wing_downPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((birdBodyShadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let wing_downOpaqueShadow = (birdBodyShadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, birdBodyShadow.shadowOffset, birdBodyShadow.shadowBlurRadius, wing_downOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        wing_downOpaqueShadow.setFill()
        wing_downPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        wing_downPath.lineWidth = 1
        wing_downPath.stroke()
    }

    public class func drawIPhoneIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, 0, 60, 60))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRectMake(2, 4, 56, 48)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), golden: false, colorInput: 0)
        CGContextRestoreGState(context)
    }

    public class func drawSettingsIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, 0, 29, 29))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRectMake(0, 2, 29, 25)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), golden: false, colorInput: 0)
        CGContextRestoreGState(context)
    }

    public class func drawSpotlightIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, 0, 40, 40))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRectMake(0, 3, 40, 34)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), golden: false, colorInput: 0)
        CGContextRestoreGState(context)
    }

    public class func drawArtwork1024p() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, 0, 1024, 1024))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(128, 59, 450, 450)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        StyleKitName.drawBall(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height), golden: false, colorInput: 0)
        CGContextRestoreGState(context)


        //// Symbol 3 Drawing
        let symbol3Rect = CGRectMake(546, 287, 450, 450)
        CGContextSaveGState(context)
        UIRectClip(symbol3Rect)
        CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y)

        StyleKitName.drawBall(frame: CGRectMake(0, 0, symbol3Rect.size.width, symbol3Rect.size.height), golden: false, colorInput: 1)
        CGContextRestoreGState(context)


        //// Symbol 4 Drawing
        let symbol4Rect = CGRectMake(96, 535, 450, 450)
        CGContextSaveGState(context)
        UIRectClip(symbol4Rect)
        CGContextTranslateCTM(context, symbol4Rect.origin.x, symbol4Rect.origin.y)

        StyleKitName.drawBall(frame: CGRectMake(0, 0, symbol4Rect.size.width, symbol4Rect.size.height), golden: false, colorInput: 2)
        CGContextRestoreGState(context)
    }

    public class func drawBox(frame frame: CGRect = CGRectMake(0, 0, 240, 120)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(frame.minX + 1, frame.minY, floor((frame.width - 1) * 0.99791 + 1) - 0.5, floor((frame.height) * 0.99583 + 0.5)), cornerRadius: 5)
        StyleKitName.sand.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
    }

    public class func drawButton(frame frame: CGRect = CGRectMake(0, 0, 160, 90), textInput: String = "Hello, World!", textSize: CGFloat = 21) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.25), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)), cornerRadius: 10)
        UIColor.whiteColor().setFill()
        rectanglePath.fill()
        UIColor.blackColor().setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Rect = CGRectMake(frame.minX + floor(frame.width * 0.02813) + 0.5, frame.minY + floor(frame.height * 0.03889) + 0.5, floor(frame.width * 0.97813) - floor(frame.width * 0.02813), floor(frame.height * 0.96111) - floor(frame.height * 0.03889))
        let rectangle2Path = UIBezierPath(roundedRect: rectangle2Rect, cornerRadius: 10)
        StyleKitName.sand.setFill()
        rectangle2Path.fill()

        ////// Rectangle 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangle2Path.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow_UltraLight.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangle2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow_UltraLight.shadowOffset, shadow_UltraLight.shadowBlurRadius, rectangle2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangle2OpaqueShadow.setFill()
        rectangle2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()
        let rectangle2Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangle2Style.alignment = .Center

        let rectangle2FontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: rectangle2Style]

        let rectangle2TextHeight: CGFloat = NSString(string: textInput).boundingRectWithSize(CGSizeMake(rectangle2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangle2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangle2Rect);
        NSString(string: textInput).drawInRect(CGRectMake(rectangle2Rect.minX, rectangle2Rect.minY + (rectangle2Rect.height - rectangle2TextHeight) / 2, rectangle2Rect.width, rectangle2TextHeight), withAttributes: rectangle2FontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawBackButton(frame frame: CGRect = CGRectMake(0, 0, 100, 75)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(frame.minX + 0.32405 * frame.width, frame.minY + 0.12540 * frame.height))
        bezier2Path.addLineToPoint(CGPointMake(frame.minX + 0.41596 * frame.width, frame.minY + 0.24795 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.29192 * frame.width, frame.minY + 0.41333 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.41596 * frame.width, frame.minY + 0.24795 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.35046 * frame.width, frame.minY + 0.33529 * frame.height))
        bezier2Path.addLineToPoint(CGPointMake(frame.minX + 0.97000 * frame.width, frame.minY + 0.41333 * frame.height))
        bezier2Path.addLineToPoint(CGPointMake(frame.minX + 0.97000 * frame.width, frame.minY + 0.58667 * frame.height))
        bezier2Path.addLineToPoint(CGPointMake(frame.minX + 0.29192 * frame.width, frame.minY + 0.58667 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.41404 * frame.width, frame.minY + 0.74949 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.34996 * frame.width, frame.minY + 0.66405 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.41404 * frame.width, frame.minY + 0.74949 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.37452 * frame.width, frame.minY + 0.80218 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.41404 * frame.width, frame.minY + 0.74949 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.39516 * frame.width, frame.minY + 0.77465 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.36270 * frame.width, frame.minY + 0.81794 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.37061 * frame.width, frame.minY + 0.80740 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.36663 * frame.width, frame.minY + 0.81270 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.32211 * frame.width, frame.minY + 0.87205 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.34164 * frame.width, frame.minY + 0.84601 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.32211 * frame.width, frame.minY + 0.87205 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.23287 * frame.width, frame.minY + 0.75306 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.32197 * frame.width, frame.minY + 0.87186 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.27940 * frame.width, frame.minY + 0.81510 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.22495 * frame.width, frame.minY + 0.74249 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23024 * frame.width, frame.minY + 0.74955 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22760 * frame.width, frame.minY + 0.74603 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.11482 * frame.width, frame.minY + 0.59565 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.17105 * frame.width, frame.minY + 0.67064 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.11482 * frame.width, frame.minY + 0.59565 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.11019 * frame.width, frame.minY + 0.58948 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.11492 * frame.width, frame.minY + 0.59562 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.11316 * frame.width, frame.minY + 0.59334 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.10808 * frame.width, frame.minY + 0.58667 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.10881 * frame.width, frame.minY + 0.58764 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.10808 * frame.width, frame.minY + 0.58667 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.04050 * frame.width, frame.minY + 0.49909 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.10809 * frame.width, frame.minY + 0.58677 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.04050 * frame.width, frame.minY + 0.49909 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.11490 * frame.width, frame.minY + 0.40170 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.04016 * frame.width, frame.minY + 0.49865 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.11338 * frame.width, frame.minY + 0.40367 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.11492 * frame.width, frame.minY + 0.40421 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.11492 * frame.width, frame.minY + 0.40169 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.11492 * frame.width, frame.minY + 0.40257 * frame.height))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 0.32399 * frame.width, frame.minY + 0.12544 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.14662 * frame.width, frame.minY + 0.36194 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.32077 * frame.width, frame.minY + 0.12975 * frame.height))
        bezier2Path.addLineToPoint(CGPointMake(frame.minX + 0.32405 * frame.width, frame.minY + 0.12540 * frame.height))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, bezier2Path.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bezier2OpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, bezier2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, StyleKitName.shadow_Light.shadowOffset, StyleKitName.shadow_Light.shadowBlurRadius, (StyleKitName.shadow_Light.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfBottom(frame frame: CGRect = CGRectMake(0, 0, 640, 175), isWinter: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBottom(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), isWinter: isWinter)

        let imageOfBottom = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBottom
    }

    public class func imageOfCloud(frame frame: CGRect = CGRectMake(0, 0, 256, 128), textInput: String = "Hello, World!", textSize: CGFloat = 21) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawCloud(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), textInput: textInput, textSize: textSize)

        let imageOfCloud = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCloud
    }

    public class func imageOfPauseButton(frame frame: CGRect = CGRectMake(0, 0, 50, 65), toggleVisibility: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawPauseButton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), toggleVisibility: toggleVisibility)

        let imageOfPauseButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfPauseButton
    }

    public class func imageOfGun(frame frame: CGRect = CGRectMake(0, 0, 150, 20)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawGun(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfGun = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGun
    }

    public class func imageOfBall(frame frame: CGRect = CGRectMake(0, 0, 100, 100), golden: Bool = false, colorInput: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBall(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), golden: golden, colorInput: colorInput)

        let imageOfBall = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBall
    }

    public class func imageOfMenuIcon(frame frame: CGRect = CGRectMake(0, 0, 125, 125), toggleVisibility: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawMenuIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), toggleVisibility: toggleVisibility)

        let imageOfMenuIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMenuIcon
    }

    public class func imageOfEgg(frame frame: CGRect = CGRectMake(0, 0, 50, 70), golden: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawEgg(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), golden: golden)

        let imageOfEgg = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfEgg
    }

    public class func imageOfMenuBar(frame frame: CGRect = CGRectMake(0, 0, 160, 90), isSelected: Bool = false, menuBarIcon: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawMenuBar(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), isSelected: isSelected, menuBarIcon: menuBarIcon)

        let imageOfMenuBar = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMenuBar
    }

    public class func imageOfBird(frame frame: CGRect = CGRectMake(0, 0, 100, 85), golden: Bool = false, colorInput: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBird(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), golden: golden, colorInput: colorInput)

        let imageOfBird = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBird
    }

    public class func imageOfBox(frame frame: CGRect = CGRectMake(0, 0, 240, 120)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBox(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfBox = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBox
    }

    public class func imageOfButton(frame frame: CGRect = CGRectMake(0, 0, 160, 90), textInput: String = "Hello, World!", textSize: CGFloat = 21) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawButton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), textInput: textInput, textSize: textSize)

        let imageOfButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfButton
    }

    public class func imageOfBackButton(frame frame: CGRect = CGRectMake(0, 0, 100, 75)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBackButton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfBackButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackButton
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
